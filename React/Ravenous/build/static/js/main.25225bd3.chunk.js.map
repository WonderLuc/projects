{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","href","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25225bd3.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Business.css\";\r\n\r\n\r\n\r\n\r\nclass Business extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Business\" >\r\n  <div className=\"image-container\">\r\n    <img src={this.props.business.imageSrc} alt={this.props.business.name}/>\r\n  </div>\r\n  <h2>{this.props.business.name}</h2>\r\n  <div className=\"Business-information\">\r\n    <div className=\"Business-address\">\r\n      <p>{this.props.business.address}</p>\r\n      <p>{this.props.business.city}</p>\r\n      <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n    </div>\r\n    <div className=\"Business-reviews\">\r\n      <h3>{this.props.business.category}</h3>\r\n      <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n      <p>{this.props.business.reviewCount}</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component{\r\n    render(){\r\n        return(<div className=\"BusinessList\">\r\n  {this.props.businesses.map(business=>{\r\n    return (<Business business={business} key={business.id}/>);\r\n  })}\r\n</div>);\r\n    }\r\n};\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={term:'',location:'',sortBy:'best_match'};\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.sortByOptions={\r\n      'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n    };\r\n  }\r\n  getSortByClass(sortByOption ){\r\n    if(sortByOption === this.state.sortBy){\r\n      return 'active';\r\n    }\r\n      return '';\r\n    \r\n  }\r\n\r\n  handleSortByChange(sortByOption){\r\n      this.setState({sortBy: sortByOption});\r\n  }\r\n\r\n  handleTermChange(event){\r\n      this.setState({term: event.target.value});\r\n  }\r\n\r\n  handleLocationChange(event){\r\n      this.setState({location: event.target.value});    \r\n  }\r\n\r\n  handleSearch(event){\r\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n    event.preventDefault();\r\n  }\r\n\r\n    renderSortByOptions(){\r\n        return Object.keys(this.sortByOptions).map(sortByOption=>{\r\n            var sortByOptionValue = this.sortByOptions[sortByOption];\r\n           return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption} </li>;\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"SearchBar\">\r\n  <div className=\"SearchBar-sort-options\">\r\n    <ul>\r\n      {this.renderSortByOptions()}\r\n    </ul>\r\n  </div>\r\n  <div className=\"SearchBar-fields\">\r\n    <input placeholder=\"Search Businesses\"  onChange={this.handleTermChange}/>\r\n    <input placeholder=\"Where?\"  onChange={this.handleLocationChange}/>\r\n  </div>\r\n  <div className=\"SearchBar-submit\">\r\n    <a href=\"\" onClick={this.handleSearch}>Let's Go</a>\r\n  </div>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","const apiKey = 'fVS8yGIl5pNn73yfkIbNXh5lzQWIk5MwblBSr9jKpmNJBUV8f4FrWXGDROPiwO4K_WM3qWoeWbVwizsH9atrrQu9W-hyIeFK8qe8CAuaUR7c1-6UBy89eN1ZW7edXXYx';\r\n\r\n\r\nconst Yelp ={\r\n    search(term, location, sortBy){\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n        {\r\n            headers:{\r\n                Authorization: `Bearer ${apiKey}` \r\n            }\r\n        }\r\n        ).then(response=>{\r\n            return response.json();\r\n        }).then(jsonResponse=>{\r\n            if(jsonResponse.businesses){\r\n               return jsonResponse.businesses.map(business=>{\r\n                   return{\r\n                      id: business.id,\r\n                      imageSrc: business.image_url,\r\n                      name: business.name,\r\n                      address: business.location.address1,\r\n                      city: business.location.city,\r\n                      state: business.state,\r\n                      zip_code: business.zipCode,\r\n                      category: business.categories[0].title,\r\n                      rating: business.rating,\r\n                      reviewCount: business.review_count\r\n\r\n                   }\r\n               });\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={businesses:[]};\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy){\n    Yelp.search(term, location, sortBy).then(businesses=>{\n      this.setState({businesses: businesses});\n      \n    })\n  }\n  render(){\n    return(\n      <div className=\"App\">\n  <h1>ravenous</h1>\n  <SearchBar searchYelp ={this.searchYelp} />\n  <BusinessList businesses={this.state.businesses}/>\n</div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}